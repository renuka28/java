<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context"
		xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-2.0.xsd
				http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop-2.0.xsd
				http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-2.5.xsd">
				
	<context:annotation-config/>
	<context:component-scan base-package="org.renuka.learn.java.jdbc"/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<!--  <property name="driverClassName" value="org.apache.derby.jdbc.ClientDriver"/> -->
		<property name="url" value="jdbc:derby://localhost:1527/db"/>		
		<property name="initialSize" value="2"/>
		<property name="maxIdle" value="5"/>
	</bean>

	<bean id="mySimpleNamedJdbcDaoImpl" class="org.renuka.learn.java.jdbc.dao.MySimpleNamedJdbcDaoImpl">
		<!--Since MyNamedJdbcDao inherits from NamedParameterJdbcDaoSupport which has setDataSource and getDataSource
		methods, we can use it to wire our datasource. We just refer to the existing datasource created above  -->
		<property name="dataSource" ref="dataSource"/>
	
	</bean>

</beans>